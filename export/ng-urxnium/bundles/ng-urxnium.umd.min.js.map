{"version":3,"sources":["../../../projects/ng-urxnium/src/lib/http/http-service.service.ts","../../../projects/ng-urxnium/src/lib/services/sign-in-window.service.ts","../../../projects/ng-urxnium/src/lib/services/sweet-alert-2.service.ts","../../../projects/ng-urxnium/src/lib/services/session.service.ts","../../../projects/ng-urxnium/src/lib/guards/authentication.guard.ts","../../../projects/ng-urxnium/src/lib/ng-urxnium.service.ts","../../../projects/ng-urxnium/src/lib/ng-urxnium.component.ts","../../../projects/ng-urxnium/src/lib/ng-urxnium.module.ts"],"names":["HttpService","Object","defineProperty","prototype","HttpHeaders","set","this","getToken","localStorage","getItem","SignInWindowService","open","url","event","Observable","observable","i","dialog","window","screenX","screenY","interval","setInterval","href","location","undefined","toString","includes","close","clearInterval","next","split","e","error","factory","ɵfac","providedIn","SweetAlert2Service","fire","message","observerNext","confirmButtonColor","cancelButtonColor","Swal","assign","allowOutsideClick","reverseButtons","closeButtonHtml","then","resp","isConfirmed","observer","SessionService","http","baseUrl","onSignIn","BehaviorSubject","count","firstSignIn","user","JSON","parse","signIn","session","setItem","token","expiration","expirationDate","refreshToken","stringify","signOut","clear","clearTimeout","timeOut","checkSession","_this","setSignIn","validateToken","subscribe","_","setSignOut","getUser","get","headers","pipe","map","data","post","refreshSession","setTimeout","i0","ɵɵinject","i1","HttpClient","AuthenticationGuard","canActivate","route","state","sessionStorage","console","log","containsRefreshTokenUrl","validateTokenUrl","checkSessionData","refreshTokenAtClock","NgUrxniumService","NgUrxniumComponent","ngOnInit","selectors","decls","vars","template","rf","ctx","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","NgUrxniumModule","imports","declarations","exports"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\n\r\nexport class HttpService {\r\n\r\n  get headers(): HttpHeaders {\r\n    return new HttpHeaders().set('Authorization', `Bearer ${this.getToken()}`);\r\n  }\r\n\r\n  private getToken(): string {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SignInWindowService {\n\n  open(url: string, event?: MouseEvent): Observable<string> {\n    return new Observable<string>(observable => {\n      let i = 0;\n      const dialog = window.open(\n        url,\n        'targetWindow',\n        `toolbar=no,\n        location=center,\n        status=no,\n        menubar=no,\n        scrollbars=no,\n        resizable=no,\n        width=400,\n        height=600,\n        ${event ? `screenX=${event.screenX}` : ''},\n        ${event ? `screenY=${event.screenY}` : ''}`\n      );\n\n      const interval = setInterval(() => {\n          try {\n            const href = dialog.location.href;\n\n            if (href !== undefined && href.toString().includes('http')) {\n              dialog.close();\n              clearInterval(interval);\n              observable.next(href.split('?code=')[1]);\n            }\n          } catch (e) { }\n\n          if (i === 10) {\n            clearInterval(interval);\n            observable.error();\n          }\n\n          i++;\n        }, 1000\n      );\n    });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { SweetAlert2Message } from '../interfaces/sweet-alert-2-message';\nimport { Observable } from 'rxjs';\nimport Swal from 'sweetalert2';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SweetAlert2Service {\n\n  fire(message: SweetAlert2Message): Observable<boolean> {\n    let observerNext = null;\n    const { confirmButtonColor, cancelButtonColor } = message;\n\n    Swal.fire({\n      ...message,\n      allowOutsideClick: false,\n      confirmButtonColor: confirmButtonColor ? confirmButtonColor : '#00d1b2',\n      cancelButtonColor: cancelButtonColor ? cancelButtonColor : '#F44336',\n      reverseButtons: true,\n      closeButtonHtml: `<button class=\"mat-focus-indicator mr-2 mat-stroked-button mat-button-base mat-accent\">Cancelar</button>`\n    }).then(resp => {\n      if (observerNext) {\n        observerNext.next(resp.isConfirmed as boolean);\n      }\n    });\n\n    return new Observable(observer => observerNext = observer);\n  }\n\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subscriber } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Session } from '../interfaces/session';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SessionService {\n\n  public onSignIn: BehaviorSubject<boolean>;\n\n  private count: boolean;\n  private firstSignIn: boolean;\n  private user: any;\n  private timeOut: any;\n\n  constructor(\n    private http: HttpClient,\n    @Inject('baseUrl') private baseUrl: string\n  ) {\n    this.onSignIn = new BehaviorSubject(false);\n    this.count = true;\n    this.firstSignIn = false;\n    this.user = JSON.parse(localStorage.getItem('user'));\n  }\n\n  signIn(session: Session, user: any): void {\n    localStorage.setItem('token', session.token);\n    localStorage.setItem('expiration', session.expiration.toString());\n    localStorage.setItem('expirationDate', session.expirationDate.toString());\n    localStorage.setItem('refreshToken', session.refreshToken);\n    localStorage.setItem('user', JSON.stringify(user));\n\n    this.user = user;\n    this.onSignIn.next(true);\n    this.firstSignIn = true;\n  }\n\n  signOut(): void {\n    localStorage.clear();\n    this.onSignIn.next(false);\n    this.firstSignIn = false;\n    clearTimeout(this.timeOut);\n  }\n\n  checkSession(): Observable<boolean> {\n    return new Observable(observable => {\n      if (this.firstSignIn) {\n        this.setSignIn(null, observable);\n      } else if (\n        localStorage.getItem('token') &&\n        localStorage.getItem('expiration') &&\n        localStorage.getItem('expirationDate') &&\n        localStorage.getItem('refreshToken') &&\n        localStorage.getItem('user') &&\n        !this.firstSignIn\n      ) {\n        this.validateToken().subscribe(\n          session => {\n            this.setSignIn(session, observable);\n          }, _ => {\n            this.refreshToken().subscribe(session => {\n              this.setSignIn(session, observable);\n            }, _ => {\n              this.setSignOut(observable);\n            });\n          }\n        );\n      } else {\n        this.setSignOut(observable);\n      }\n    });\n  }\n\n  getUser(): any {\n    return this.user;\n  }\n\n  private validateToken(): Observable<Session> {\n    return this.http.get(\n      `${this.baseUrl}/auth/validate-token`,\n      { headers: this.headers }\n    ).pipe(map((resp: any) => {\n      const session = resp.data.session;\n      delete resp.data.session;\n\n      this.user = resp.data;\n      localStorage.setItem('user', JSON.stringify(resp.data));\n\n      return session;\n    }));\n  }\n\n  private refreshToken(): Observable<Session> {\n    return this.http.post(\n      `${this.baseUrl}/auth/refresh-token`,\n      { refreshToken: localStorage.getItem('refreshToken') }\n    ).pipe(map((resp: any) => resp.data as Session));\n  }\n\n  private refreshSession(): void {\n    if (this.count) {\n      this.count = false;\n\n      this.timeOut = setTimeout(() => {\n        this.refreshToken().subscribe(\n          session => {\n            localStorage.setItem('token', session.token);\n            localStorage.setItem('expiration', session.expiration.toString());\n            localStorage.setItem('expirationDate', session.expirationDate.toString());\n\n            this.count = true;\n            this.refreshSession();\n          }, _ => {\n            this.signOut();\n          }\n        );\n      }, localStorage.getItem('expiration') as unknown as number);\n    }\n  }\n\n  private setSignIn(session: Session, observable: Subscriber<boolean>): void {\n    if (session) {\n      localStorage.setItem('token', session.token);\n      localStorage.setItem('expiration', session.expiration.toString());\n      localStorage.setItem('expirationDate', session.expirationDate.toString());\n    }\n\n    this.refreshSession();\n    this.onSignIn.next(true);\n    observable.next(true);\n  }\n\n  private setSignOut(observable: Subscriber<boolean>): void {\n    this.signOut();\n    observable.next(false);\n  }\n\n  private get headers(): HttpHeaders {\n    return new HttpHeaders().set('Authorization', `Bearer ${localStorage.getItem('token')}`);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable, Subscriber } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationGuard implements CanActivate {\n\n  private user: any;\n  private token: string;\n  private refreshToken: string;\n\n  constructor(private http: HttpClient) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    this.user = sessionStorage.getItem('user');\n    this.token = sessionStorage.getItem('token');\n    this.refreshToken = sessionStorage.getItem('refreshToken');\n\n    return new Observable<boolean>(observable => {\n        console.log('aqui va toda la programacion externa');\n    });\n  }\n\n  private containsRefreshTokenUrl(\n    route: ActivatedRouteSnapshot,\n    observable: Subscriber<boolean>\n  ): boolean {\n    if (route.data.validateTokenUrl) {\n      return true;\n    }\n\n    observable.next(false);\n    return false;\n  }\n\n  private checkSessionData(observable: Subscriber<boolean>): void {\n    if (this.user && this.refreshToken && this.token) {\n      this.http.get('valid token').subscribe(\n        _ => {\n          //proceso de hasta cuando\n          observable.next(true);\n        }, _ => {\n          //refresh token\n          this.http.get('').subscribe(\n            _ => {\n              this.refreshTokenAtClock();\n              observable.next(true);\n            }, _ => {\n              //close session\n              sessionStorage.clear();\n              observable.next(false);\n            }\n          )\n        }\n      );\n    } else {\n      observable.next(false);\n    }\n  }\n\n  private refreshTokenAtClock(): void {\n    //aqui va el timer para refrescar el token\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgUrxniumService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-ng-urxnium',\n  template: `\n    <p>\n      ng-urxnium works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class NgUrxniumComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgUrxniumComponent } from './ng-urxnium.component';\n\n@NgModule({\n  declarations: [NgUrxniumComponent],\n  imports: [\n  ],\n  exports: [NgUrxniumComponent]\n})\nexport class NgUrxniumModule { }\n"]}