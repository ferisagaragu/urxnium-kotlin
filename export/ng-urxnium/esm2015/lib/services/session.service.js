import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class SessionService {
    constructor(http, baseUrl) {
        this.http = http;
        this.baseUrl = baseUrl;
        this.onSignIn = new BehaviorSubject(false);
        this.count = true;
        this.firstSignIn = false;
        this.user = JSON.parse(localStorage.getItem('user'));
    }
    signIn(session, user) {
        localStorage.setItem('token', session.token);
        localStorage.setItem('expiration', session.expiration.toString());
        localStorage.setItem('expirationDate', session.expirationDate.toString());
        localStorage.setItem('refreshToken', session.refreshToken);
        localStorage.setItem('user', JSON.stringify(user));
        this.user = user;
        this.onSignIn.next(true);
        this.firstSignIn = true;
    }
    signOut() {
        localStorage.clear();
        this.onSignIn.next(false);
        this.firstSignIn = false;
        clearTimeout(this.timeOut);
    }
    checkSession() {
        return new Observable(observable => {
            if (this.firstSignIn) {
                this.setSignIn(null, observable);
            }
            else if (localStorage.getItem('token') &&
                localStorage.getItem('expiration') &&
                localStorage.getItem('expirationDate') &&
                localStorage.getItem('refreshToken') &&
                localStorage.getItem('user') &&
                !this.firstSignIn) {
                this.validateToken().subscribe(session => {
                    this.setSignIn(session, observable);
                }, _ => {
                    this.refreshToken().subscribe(session => {
                        this.setSignIn(session, observable);
                    }, _ => {
                        this.setSignOut(observable);
                    });
                });
            }
            else {
                this.setSignOut(observable);
            }
        });
    }
    getUser() {
        return this.user;
    }
    validateToken() {
        return this.http.get(`${this.baseUrl}/auth/validate-token`, { headers: this.headers }).pipe(map((resp) => {
            const session = resp.data.session;
            delete resp.data.session;
            this.user = resp.data;
            localStorage.setItem('user', JSON.stringify(resp.data));
            return session;
        }));
    }
    refreshToken() {
        return this.http.post(`${this.baseUrl}/auth/refresh-token`, { refreshToken: localStorage.getItem('refreshToken') }).pipe(map((resp) => resp.data));
    }
    refreshSession() {
        if (this.count) {
            this.count = false;
            this.timeOut = setTimeout(() => {
                this.refreshToken().subscribe(session => {
                    localStorage.setItem('token', session.token);
                    localStorage.setItem('expiration', session.expiration.toString());
                    localStorage.setItem('expirationDate', session.expirationDate.toString());
                    this.count = true;
                    this.refreshSession();
                }, _ => {
                    this.signOut();
                });
            }, localStorage.getItem('expiration'));
        }
    }
    setSignIn(session, observable) {
        if (session) {
            localStorage.setItem('token', session.token);
            localStorage.setItem('expiration', session.expiration.toString());
            localStorage.setItem('expirationDate', session.expirationDate.toString());
        }
        this.refreshSession();
        this.onSignIn.next(true);
        observable.next(true);
    }
    setSignOut(observable) {
        this.signOut();
        observable.next(false);
    }
    get headers() {
        return new HttpHeaders().set('Authorization', `Bearer ${localStorage.getItem('token')}`);
    }
}
SessionService.ɵfac = function SessionService_Factory(t) { return new (t || SessionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('baseUrl')); };
SessionService.ɵprov = i0.ɵɵdefineInjectable({ token: SessionService, factory: SessionService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(SessionService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                type: Inject,
                args: ['baseUrl']
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,